{"version":3,"sources":["../src/linked-list-node.js"],"names":[],"mappings":";;;;;;;;;;IAAqB,cAAc;AACpB,aADM,cAAc,CACnB,KAAK,EAAE;8BADF,cAAc;;AAE3B,YAAI,CAAC,KAAK,GAAG,KAAK,CAAA;AAClB,YAAI,CAAC,KAAK,GAAG,SAAS,CAAA;AACtB,YAAI,CAAC,KAAK,GAAG,SAAS,CAAA;AACtB,YAAI,CAAC,OAAO,GAAG,KAAK,CAAA;KACvB;;iBANgB,cAAc;;eAQf,0BAAC,KAAK,EAAE;AACpB,gBAAM,IAAI,GAAG,IAAI,cAAc,CAAC,KAAK,CAAC,CAAA;AACtC,gBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;AACtB,mBAAO,IAAI,CAAA;SACd;;;eACgB,2BAAC,KAAK,EAAE;AACrB,gBAAM,IAAI,GAAG,IAAI,cAAc,CAAC,KAAK,CAAC,CAAA;AACtC,gBAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;AACvB,mBAAO,IAAI,CAAA;SACd;;;eAEU,qBAAC,IAAI,EAAE;AACd,gBAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;AACrB,gBAAI,CAAC,IAAI,GAAG,IAAI,CAAA;SACnB;;;eACW,sBAAC,IAAI,EAAE;AACf,gBAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;AACrB,gBAAI,CAAC,IAAI,GAAG,IAAI,CAAA;SACnB;;;eACU,uBAAG;AACV,gBAAG,IAAI,CAAC,OAAO,EACX,OAAM;;AAEV,gBAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAA;AACzB,gBAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAA;AACzB,gBAAI,CAAC,OAAO,GAAG,IAAI,CAAA;AACnB,gBAAG,OAAO,EACN,OAAO,CAAC,KAAK,GAAG,OAAO,CAAA;AAC3B,gBAAG,OAAO,EACN,OAAO,CAAC,KAAK,GAAG,OAAO,CAAA;SAC9B;;;eACK,kBAAG;AACL,gBAAI,CAAC,WAAW,EAAE,CAAA;SACrB;;;aAEO,eAAG;AACP,mBAAO,IAAI,CAAC,KAAK,CAAA;SACpB;aACO,aAAC,IAAI,EAAE;AACX,gBAAG,IAAI,CAAC,KAAK,EACT,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,SAAS,CAAA;AAChC,gBAAI,CAAC,KAAK,GAAG,IAAI,CAAA;AACjB,gBAAG,IAAI,EAAE;AACL,oBAAG,IAAI,CAAC,KAAK,EACT,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,SAAS,CAAA;AAChC,oBAAI,CAAC,KAAK,GAAG,IAAI,CAAA;aACpB;SACJ;;;aACO,eAAG;AACP,mBAAO,IAAI,CAAC,KAAK,CAAA;SACpB;aACO,aAAC,IAAI,EAAE;AACX,gBAAG,IAAI,CAAC,KAAK,EACT,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,SAAS,CAAA;AAChC,gBAAI,CAAC,KAAK,GAAG,IAAI,CAAA;AACjB,gBAAG,IAAI,EAAE;AACL,oBAAG,IAAI,CAAC,KAAK,EACT,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,SAAS,CAAA;AAChC,oBAAI,CAAC,KAAK,GAAG,IAAI,CAAA;aACpB;SACJ;;;WApEgB,cAAc;;;qBAAd,cAAc","file":"src/linked-list-node.js","sourcesContent":["export default class LinkedListNode {\n    constructor(value) {\n        this.value = value\n        this._next = undefined\n        this._prev = undefined\n        this.removed = false\n    }\n    \n    insertValueAfter(value) {\n        const node = new LinkedListNode(value)\n        this.insertAfter(node)\n        return node\n    }\n    insertValueBefore(value) {\n        const node = new LinkedListNode(value)\n        this.insertBefore(node)\n        return node\n    }\n    \n    insertAfter(node) {\n        node.next = this.next\n        node.prev = this\n    }\n    insertBefore(node) {\n        node.prev = this.prev\n        node.next = this\n    }\n    base_remove() {\n        if(this.removed)\n            return\n\n        const oldPrev = this.prev\n        const oldNext = this.next\n        this.removed = true\n        if(oldPrev)\n            oldPrev._next = oldNext\n        if(oldNext)\n            oldNext._prev = oldPrev\n    }\n    remove() {\n        this.base_remove()\n    }\n    \n    get next() {\n        return this._next\n    }\n    set next(node) {\n        if(this._next)\n            this._next._prev = undefined\n        this._next = node\n        if(node) {\n            if(node._prev)\n                node._prev._next = undefined\n            node._prev = this\n        }\n    }\n    get prev() {\n        return this._prev\n    }\n    set prev(node) {\n        if(this._prev)\n            this._prev._next = undefined\n        this._prev = node\n        if(node) {\n            if(node._next)\n                node._next._prev = undefined\n            node._next = this\n        }\n    }\n}\n"]}