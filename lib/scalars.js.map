{"version":3,"sources":["../src/scalars.js"],"names":[],"mappings":";;;;;;;;;;;AACO,SAAS,KAAK;;;8BAAgB;YAAf,KAAK;YAAE,EAAE;YAAE,EAAE;;;AAC/B,YAAG,EAAE,GAAG,EAAE;iBAAe,KAAK;kBAAE,EAAE;kBAAE,EAAE;;;SAAC;AACvC,YAAG,KAAK,GAAG,EAAE,EAAE,OAAO,EAAE,CAAA;AACxB,YAAG,KAAK,GAAG,EAAE,EAAE,OAAO,EAAE,CAAA;AACxB,eAAO,KAAK,CAAA;KACf;CAAA;;AAEM,SAAS,aAAa;;;gCAAS;YAAR,EAAE;YAAE,EAAE;;;AAChC,YAAG,EAAE,GAAG,EAAE;kBAAuB,EAAE;kBAAE,EAAE;;;SAAC;AACxC,YAAG,EAAE,KAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,MAAM,IAAI,KAAK,EAAE,CAAA;AAC3C,YAAG,EAAE,KAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,MAAM,IAAI,KAAK,EAAE,CAAA;AAC3C,eAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAA,AAAC,CAAC,GAAG,EAAE,CAAA;KACpD;CAAA;;AAEM,SAAS,WAAW;;;gCAAS;YAAR,EAAE;YAAE,EAAE;;;AAC9B,YAAG,EAAE,GAAG,EAAE;kBAAqB,EAAE;kBAAE,EAAE;;;SAAC;AACtC,eAAO,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAA,AAAC,GAAG,EAAE,CAAA;KACxC;CAAA;;AAEM,SAAS,iBAAiB,CAAC,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE;AAChD,QAAG,IAAI,GAAG,EAAE,EAAE,OAAO,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,GAAG,MAAM,CAAC,CAAA;AACvD,QAAG,MAAM,IAAI,CAAC,EAAE,OAAO,IAAI,CAAA;AAC3B,QAAG,MAAM,IAAI,CAAC,EAAE,OAAO,EAAE,CAAA;AACzB,WAAO,IAAI,GAAG,CAAC,EAAE,GAAG,IAAI,CAAA,GAAI,MAAM,CAAA;CACrC;;AAEM,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;AAClC,WAAO,CAAC,AAAC,CAAC,GAAG,CAAC,GAAI,CAAC,CAAA,GAAI,CAAC,CAAA;CAC3B","file":"src/scalars.js","sourcesContent":["\nexport function clamp(value, lo, hi) {\n    if(lo > hi) return clamp(value, hi, lo)\n    if(value < lo) return lo\n    if(value > hi) return hi\n    return value\n}\n\nexport function randomInteger(lo, hi) {\n    if(lo > hi) return randomInteger(hi, lo)\n    if(lo !== Math.floor(lo)) throw new Error()\n    if(hi !== Math.floor(hi)) throw new Error()\n    return Math.floor(Math.random() * (hi - lo)) + lo\n}\n\nexport function randomFloat(lo, hi) {\n    if(lo > hi) return randomFloat(hi, lo)\n    return Math.random() * (hi - lo) + lo\n}\n\nexport function linearInterpolate(from, to, factor) {\n    if(from > to) return exports.lerp(to, from, 1 - factor)\n    if(factor <= 0) return from\n    if(factor >= 1) return to\n    return from + (to - from) * factor\n}\n\nexport function positiveModulus(r, s) {\n    return ((r % s) + s) % s\n}\n"]}