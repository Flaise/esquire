{"version":3,"sources":["../../src/scene/icon.js"],"names":[],"mappings":"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","file":"src/scene/icon.js","sourcesContent":["export default class Icon {\n    constructor(atlas) {\n        this.atlas = atlas\n        this._hFlip = undefined\n        this._vFlip = undefined\n        this.flipX = 1\n        this.flipY = 1\n    }\n    \n    // TODO: flippedHorizontally().flippedVertically().flippedHorizontally().flippedVertically()\n    //       does not return original\n    flippedHorizontally() {\n        if(!this._hFlip) {\n            this._hFlip = new Icon(this.atlas)\n            this._hFlip.flipX = -this.flipX\n            this._hFlip._hFlip = this\n        }\n        return this._hFlip\n    }\n    \n    draw(context, x, y, w, h) {\n        if(!this.atlas)\n            return\n        else if(!this.atlas.image)\n            return\n        else if(w === 0 || h === 0)\n            return\n        else if(!w || !h)\n            console.warn('Invalid destination size ' + w + ', ' + h)\n        else if(!this.atlas.image.width || !this.atlas.image.height)\n            return // if missing, Firefox throws and Chrome (sometimes?) has performance issues\n        \n        const data = this.atlas.sprites[this.name]\n        if(!data)\n            return\n        if(data.solid) {\n            if((this.flipX !== 1) || (this.flipY !== 1)) {\n                ////////////////////////////////////// TODO: precompute flipped atlas\n                context.save()\n                context.scale(this.flipX, this.flipY)\n            }\n            context.drawImage(this.atlas.image, data.x, data.y, data.w, data.h,\n                              this.flipX * x - data.axRel * w * data.sx,\n                              this.flipY * y - data.ayRel * h * data.sy,\n                              w * data.sx, h * data.sy)\n            if((this.flipX !== 1) || (this.flipY !== 1)) {\n                context.restore()\n            }\n        }\n        else {\n            if((this.flipX !== 1) || (this.flipY !== 1)) {\n                context.save()\n                context.scale(this.flipX, this.flipY)\n            }\n            context.drawImage(this.atlas.image, data.x, data.y, data.w, data.h,\n                              this.flipX * x + (data.insetXRel - data.axRel) * w * data.sx,\n                              this.flipY * y + (data.insetYRel - data.ayRel) * h * data.sy,\n                              (w + data.insetWRel * w) * data.sx,\n                              (h + data.insetHRel * h) * data.sy)\n            if((this.flipX !== 1) || (this.flipY !== 1)) {\n                context.restore()\n            }\n        }\n    }\n    \n    /*\n     * Returns an [x, y, w, h] array of rectangle bounds that specify the area of the canvas that\n     * will be taken up when this icon is drawn on a tile of the dimensions given.\n     */\n    bounds(x, y, w, h) {\n        const data = this.atlas.sprites[this.name]\n        if(!data)\n            return [0, 0, 0, 0]\n        if(data.solid)\n            return [x - data.axRel * w * data.sx, y - data.ayRel * h * data.sy,\n                    w * data.sx, h * data.sy]\n        else\n            return [x + (data.insetXRel - data.axRel) * w * data.sx,\n                    y + (data.insetYRel - data.ayRel) * h * data.sy,\n                    (w + data.insetWRel * w) * data.sx,\n                    (h + data.insetHRel * h) * data.sy]\n    }\n}\n\nexport const blank = new Icon()\n"]}