import Icon from './icon'

export default class Atlas {
    constructor() {
        this.icons = Object.create(null)
        this.layout = undefined
        this.image = undefined
        this._loadingCounter = 0
    }
    
    get(name) {
        // TODO: use aliasList generated by TexturePacker
        
        let icon = this.icons[name]
        if(!icon) {
            icon = new Icon(this, name)
            this.icons[name] = icon
        }
        return icon
    }
    
    _sprite(name) {
        return this.layout && this.layout.sprites && this.layout.sprites[name]
    }
    
    hasData(name) {
        return !!this._sprite(name)
    }
    
    loadImage(source, next) {
        this.image = undefined
        this._loadingCounter += 1
        const loadingCounter = this._loadingCounter
        
        loadImageObject(source, (err, image) => {
            if(loadingCounter !== this._loadingCounter)
                return
            
            if(err) {
                if(next)
                    next(err)
                else
                    console.error(err)
                return
            }
            
            this.image = image
            next && next()
        })
    }
    
    load(data, next) {
        const oldImage = this.layout && this.layout.image
        
        for(let spriteName of Object.keys(data.sprites)) {
            const icon = this.icons[spriteName]
            if(icon)
                icon.load(data.sprites[spriteName])
        }
        this.layout = data
        
        if(data.image && data.image !== oldImage) {
            this.loadImage(data.image, next)
        }
        else {
            setTimeout(next)
        }
    }
}

function loadImageObject(source, next) {
    const image = new window.Image()
    image.onload = () => {
        image.onload = image.onerror = image.onabort = undefined
        next && next(undefined, image)
    }
    image.onerror = () => {
        image.onload = image.onerror = image.onabort = undefined
        next && next(new Error('Unable to load image.'))
    }
    image.src = source
}
