'use strict';
var TileFieldAvatar = require('./tile-field-avatar');
var Smoothing = require('./smoothing');

// exporting this to silence warning generated by returning it from an exported function
var SegmentedTileField = (function () {
    function SegmentedTileField(avatars, tileSize, divisionThreshold) {
        this.avatars = avatars;
        this.divisionThreshold = divisionThreshold;
        this._rows = {};
        this._fields = {};
        this._layer = 0;
        if (isNaN(divisionThreshold))
            throw new Error();
        this._tileSize = tileSize;
    }
    SegmentedTileField.prototype._indexOf = function (x, y) {
        return Math.floor(x / this.divisionThreshold) + ',' + Math.floor(y);
    };
    SegmentedTileField.prototype._ensureRow = function (y) {
        var result = this._rows[y];
        if (!result) {
            result = new Smoothing(this.avatars);
            result.enabled = this.smoothingEnabled;
            result.layer = y;
            this._rows[y] = result;
        }
        return result;
    };
    SegmentedTileField.prototype._ensureField = function (x, y) {
        var fieldIndex = this._indexOf(x, y);
        var result = this._fields[fieldIndex];
        if (!result) {
            result = new TileFieldAvatar(this._ensureRow(y), this.tileSize);
            result.fieldGroup = this;
            result.layer = x;
            this._fields[fieldIndex] = result;
        }
        return result;
    };
    SegmentedTileField.prototype._modifyAt = function (x, y) {
        var field = this._fields[this._indexOf(x, y)];
        if (field)
            field._alter();
    };
    SegmentedTileField.prototype._modifyAround = function (x, y) {
        this._modifyAt(x - 1, y - 1);
        this._modifyAt(x + 1, y - 1);
        this._modifyAt(x - 1, y);
        this._modifyAt(x + 1, y);
        this._modifyAt(x - 1, y + 1);
        this._modifyAt(x + 1, y + 1);
    };

    SegmentedTileField.prototype.hasTile = function (position, type) {
        var field = this._fields[this._indexOf(position.x, position.y)];
        if (!field)
            return false;
        return field.hasTile(position, type);
    };
    SegmentedTileField.prototype.drawSelectedTile = function (selector, type, x, y, layer, observedTypes) {
        var _this = this;
        var removal = this._ensureField(x, y).drawSelectedTile(selector, type, x, y, layer, observedTypes);
        this._modifyAround(x, y);
        return function () {
            removal();
            _this._modifyAround(x, y);
        };
    };
    SegmentedTileField.prototype.drawTile = function (icon, x, y, layer, type) {
        var _this = this;
        var removal = this._ensureField(x, y).drawTile(icon, x, y, layer, type);
        this._modifyAround(x, y);
        return function () {
            removal();
            _this._modifyAround(x, y);
        };
    };
    SegmentedTileField.prototype.remove = function () {
        var _this = this;
        Object.keys(this._rows).forEach(function (key) {
            return _this._rows[key].remove();
        });
    };

    SegmentedTileField.prototype._forEach = function (callback) {
        var _this = this;
        Object.keys(this._fields).forEach(function (key) {
            return callback(_this._fields[key]);
        });
    };

    Object.defineProperty(SegmentedTileField.prototype, "tileSize", {
        get: function () {
            return this._tileSize;
        },
        set: function (value) {
            this._tileSize = value;
            this._forEach(function (field) {
                field.tileSize = value;
            });
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(SegmentedTileField.prototype, "smoothingEnabled", {
        get: function () {
            return this._smoothingEnabled;
        },
        set: function (value) {
            var _this = this;
            this._smoothingEnabled = value;
            Object.keys(this._rows).forEach(function (key) {
                _this._rows[key].enabled = value;
            });
        },
        enumerable: true,
        configurable: true
    });
    return SegmentedTileField;
})();
exports.SegmentedTileField = SegmentedTileField;

function make(camera, tileSize, maxTileSize) {
    // limit pixel size to limit redraws - maximum is roughly 8000 on Firefox
    // subtract a few for objects that aren't contained by their tiles
    return new SegmentedTileField(camera.avatars, tileSize, Math.floor(5000 / maxTileSize) - 2);
}
exports.make = make;
