'use strict'

var is = require('../is')


// for porting from QUnit
function ok(condition, reason) {
    expect(condition).toBe(true)
}

describe('Is', function() {
    it('object', function() {
        expect(is.object(function() {})).toBe(false)
        expect(is.object(is.func)).toBe(false)
        expect(is.object(setTimeout)).toBe(false)
        expect(is.object(true)).toBe(false)
        expect(is.object(false)).toBe(false)
        expect(is.object({})).toBe(true)
        expect(is.object([])).toBe(true)
        expect(is.object([1, 2])).toBe(true)
        expect(is.object({a: 3})).toBe(true)
        expect(is.object(9)).toBe(false)
        expect(is.object(0)).toBe(false)
        expect(is.object(-.1)).toBe(false)
        expect(is.object('')).toBe(false)
        expect(is.object('asdf')).toBe(false)
        expect(is.object(NaN)).toBe(false)
        expect(is.object(Infinity)).toBe(false)
        expect(is.object(undefined)).toBe(false)
        expect(is.object(null)).toBe(false)
    })
    it('function', function() {
        expect(is.func(function() {})).toBe(true)
        expect(is.func(is.func)).toBe(true)
        expect(is.func(setTimeout)).toBe(true)
        expect(is.func(true)).toBe(false)
        expect(is.func(false)).toBe(false)
        expect(is.func({})).toBe(false)
        expect(is.func([])).toBe(false)
        expect(is.func([1, 2])).toBe(false)
        expect(is.func({a: 3})).toBe(false)
        expect(is.func(9)).toBe(false)
        expect(is.func(0)).toBe(false)
        expect(is.func(-.1)).toBe(false)
        expect(is.func('')).toBe(false)
        expect(is.func('asdf')).toBe(false)
        expect(is.func(NaN)).toBe(false)
        expect(is.func(Infinity)).toBe(false)
        expect(is.func(undefined)).toBe(false)
        expect(is.func(null)).toBe(false)
    })
    it('boolean', function() {
        expect(is.boolean(true)).toBe(true)
        expect(is.boolean(false)).toBe(true)
        expect(is.boolean({})).toBe(false)
        expect(is.boolean([])).toBe(false)
        expect(is.boolean([1, 2])).toBe(false)
        expect(is.boolean({a: 3})).toBe(false)
        expect(is.boolean(9)).toBe(false)
        expect(is.boolean(0)).toBe(false)
        expect(is.boolean(-.1)).toBe(false)
        expect(is.boolean('')).toBe(false)
        expect(is.boolean('asdf')).toBe(false)
        expect(is.boolean(NaN)).toBe(false)
        expect(is.boolean(Infinity)).toBe(false)
        expect(is.boolean(undefined)).toBe(false)
        expect(is.boolean(null)).toBe(false)
        expect(is.boolean(function() {})).toBe(false)
    })
    it('actually a number', function() {
        ok(is.number(1))
        ok(is.number(100))
        ok(is.number(100.001))
        ok(is.number(0))
        ok(is.number(-90.3))
        ok(is.number(-90))
        ok(is.number(1 / 100000000 / 1000000 / 1000000))
        ok(is.number(100 * 100 * 100 * 100 * 100 * 100))
    })
    it('not pretending to be a number', function() {
        ok(!is.number(null))
        ok(!is.number(NaN))
        ok(!is.number(Infinity))
    })
    it('nullish', function() {
        ok(is.nullish(null), 'null')
        ok(is.nullish(undefined), undefined)
        ok(!is.nullish(''), 'empty string')
        ok(!is.nullish(0), 'zero')
        ok(!is.nullish([]), 'empty list')
        ok(!is.nullish({}), 'empty hash')
        ok(!is.nullish(NaN), 'NaN')
        expect(is.nullish(function() {})).toBe(false)
    })
    it('defined', function() {
        ok(is.defined({}), 'empty hash')
        ok(is.defined([]), 'empty list')
        ok(is.defined(''), 'empty string')
        ok(is.defined(0), 'zero')
        ok(is.defined(NaN), 'NaN')
        ok(!is.defined(undefined), 'undefined')
        ok(!is.defined(null), 'null')
        expect(is.defined(function() {})).toBe(true)
    })
    it('integer', function() {
        ok(!is.integer({}), 'empty hash')
        ok(!is.integer([]), 'empty list')
        ok(!is.integer(''), 'empty string')
        ok(is.integer(0), 'zero')
        ok(is.integer(1), '1')
        ok(is.integer(1.0), '1.0')
        ok(is.integer(-1), '-1')
        ok(is.integer(Math.pow(10000000, 1000000)), 'big int')
        ok(is.integer(Math.pow(10000000, 1000000) - 1), 'big int - 1')
        ok(is.integer(1e999), '1e999')
        ok(is.integer(1e99999 - .1), '1e99999 - .1')
        ok(!is.integer(.9), '.9')
        ok(!is.integer(1 / 2), '1 / 2')
        ok(!is.integer(1e-99), '1e-99')
        ok(!is.integer(NaN), 'NaN')
        ok(!is.integer(undefined), 'undefined')
        ok(!is.integer(null), 'null')
        expect(is.integer(function() {})).toBe(false)
    })
    it('composes functions', function() {
        expect(is.integer.or.nullish(null)).toBe(true)
        expect(is.integer.or.nullish(undefined)).toBe(true)
        expect(is.integer.or.nullish(1)).toBe(true)
        expect(is.integer.or.nullish(1.1)).toBe(false)
        
        expect(is.nullish.or.integer(null)).toBe(true)
        expect(is.nullish.or.integer(undefined)).toBe(true)
        expect(is.nullish.or.integer(1)).toBe(true)
        expect(is.nullish.or.integer(1.1)).toBe(false)
        
        expect(is.integer.or.number(-1)).toBe(true)
        expect(is.number.or.integer(-1)).toBe(true)
        expect(is.number.or.integer('asdf')).toBe(false)
        
        expect(is.integer.or.number.or.nullish(null)).toBe(true)
        expect(is.integer.or.number.or.nullish(1.1)).toBe(true)
        expect(is.integer.or.number.or.nullish(-5)).toBe(true)
    })
})

